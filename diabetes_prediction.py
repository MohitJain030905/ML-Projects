# -*- coding: utf-8 -*-
"""Diabetes Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Al2Q9JY41QiRCi7FhhqQ8qfoZ0MNpkSm
"""

# Step 1: Install required libraries (uncomment if needed)
# !pip install pandas numpy matplotlib seaborn scikit-learn

# Step 2: Import libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 3: Load dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness',
           'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
data = pd.read_csv(url, names=columns)

# Step 4: Basic data exploration
print(data.head())
print(data.describe())

# Step 5: Visualizations

# 5.1: Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

# 5.2: Distribution of each feature
data.hist(bins=20, figsize=(15, 10), color='skyblue', edgecolor='black')
plt.tight_layout()
plt.suptitle("Distribution of Features", fontsize=16, y=1.02)
plt.show()

# 5.3: Outcome count plot
sns.countplot(x='Outcome', data=data, palette='Set2')
plt.title("Diabetes Outcome Count")
plt.xticks([0, 1], ['No Diabetes', 'Diabetes'])
plt.show()

# Step 6: Prepare data for model
X = data.drop('Outcome', axis=1)
y = data['Outcome']

# Step 7: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 8: Train logistic regression model
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

# Step 9: Predict and evaluate
y_pred = model.predict(X_test)

print("âœ… Accuracy:", accuracy_score(y_test, y_pred))
print("\nðŸ“Š Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nðŸ“„ Classification Report:\n", classification_report(y_test, y_pred))

# Step 10: Confusion matrix plot
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Greens')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()